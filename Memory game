# implementation of card game - Memory

import simplegui
import random

# global variables
CARD_WIDTH = 50
CARD_HEIGHT = 100

# helper function to initialize globals
def new_game():    
    global cards_list, exposed_list, turns_count, state
    
# 1. model the deck of cards as a list 
    cards_list = range(8) 
    
# 1. concatenation the same list
    cards_list.extend(cards_list)
    
# 3. shuffle the deck
    random.shuffle(cards_list)

# game start parametres
    exposed_list = [False for card in cards_list]
    state = 0
    turns_count = 0
    pass
    
# define event handlers

# 5. event handler for mouse clicks
def mouseclick(pos):
    # add game state logic here
    card_i = pos[0] // CARD_WIDTH
    
    global exposed_list, card1, card2, turns_count, state
    if exposed_list[card_i] == True:
        return
    
# 6-8. modify the event handler for mouse clicks to expose cards, determining if 
# they match and if they are paired   

# first card
    if state == 0:   
        state = 1
        card1 = card_i
        turns_count += 1
# second card
    elif state == 1:  
        state = 2
        card2 = card_i
# third card
    else:		
        state = 1
        if (cards_list[card1] != cards_list[card2]):
            exposed_list[card1] = False
            exposed_list[card2] = False
            
        card1 = card_i
        turns_count += 1

    exposed_list[card_i] = True
    pass
    
# cards are logically 50x100 pixels in size

# 2. draw handler that iterates through the Memory deck
def draw(canvas):
    card_left_up = [0,0]
    
# 4. Combining ith elements of iterables    
    for card, exposed in zip(cards_list, exposed_list):
        card_f = [card_left_up, 
                    [card_left_up[0], card_left_up[1]+CARD_HEIGHT], 
                    [card_left_up[0]+CARD_WIDTH, card_left_up[1]+CARD_HEIGHT],
                    [card_left_up[0]+CARD_WIDTH, 0]]
        if exposed == True:   
            canvas.draw_text(str(card), (card_left_up[0]+10,card_left_up[1]+70), 50, "white")
        else:
            canvas.draw_polygon(card_f, 3, "black", "green")
        card_left_up[0] += CARD_WIDTH

# 9. updating counter display
    label.set_text("Turns = "+str(turns_count))
    pass

# create frame and add a button and labels

frame = simplegui.create_frame("Memory", 800, 100)

# 10. reset / restart the game functionality
frame.add_button("Reset", new_game)
label = frame.add_label("Turns = 0")

# register event handlers
frame.set_mouseclick_handler(mouseclick)
frame.set_draw_handler(draw)

# get things rolling
new_game()
frame.start()
